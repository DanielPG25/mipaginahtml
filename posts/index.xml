<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sysadblog</title>
    <link>https://sysadblog.onrender.com/posts/</link>
    <description>Recent content in Posts on Sysadblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 Dec 2021 13:38:28 +0100</lastBuildDate><atom:link href="https://sysadblog.onrender.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuración de HTTPS en el VPS</title>
      <link>https://sysadblog.onrender.com/posts/practica_https_vps/</link>
      <pubDate>Thu, 02 Dec 2021 13:38:28 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_https_vps/</guid>
      <description>Configuración de HTTPS en el VPS    Vamos a configurar el protocolo HTTPS para el acceso a nuestras aplicaciones, para ello, hay que tener en cuenta lo siguiente:
 Vamos a utilizar el servicio https://letsencrypt.org para solicitar los certificados de nuestras páginas. Comprueba que el navegador tiene el certificado de Let’s Encrypt. Explica detenidamente cómo se solicita un certificado en Let’s Encrypt. Tienes dos opciones:  Solicitar un certificado para los nombres que tienes.</description>
    </item>
    
    <item>
      <title>Certificados Digitales y HTTPS</title>
      <link>https://sysadblog.onrender.com/posts/practica_certificadosdigitales_https/</link>
      <pubDate>Wed, 01 Dec 2021 08:18:05 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_certificadosdigitales_https/</guid>
      <description>Certificados digitales. HTTPS    Certificado digital de persona física    Tarea 1: Instalación del certificado    Una vez que hayas obtenido tu certificado, explica brevemente como se instala en tu navegador favorito.    Antes de instalar el certificado, e incluso antes de solicitarlo, debemos tener instalado el software necesario para ello. A continuación, tras rellenar los formularios adecuados y sacar cita para obtener el certificado, podemos ir a la autoridad certificadora y obtener el certificado.</description>
    </item>
    
    <item>
      <title>Instalación de un CMS python (Mezzanine)</title>
      <link>https://sysadblog.onrender.com/posts/practica_instalacion_cms_python/</link>
      <pubDate>Fri, 26 Nov 2021 19:12:33 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_instalacion_cms_python/</guid>
      <description>Instalación de un CMS python    En esta tarea vamos a desplegar un CMS python. Tienes que realizar la instalación de un CMS python basado en django (puedes encontrar varios en el siguiente enlace.
Instala el CMS en el entorno de desarrollo. Debes utilizar un entorno virtual.    En mi caso, he elegido instalar &amp;ldquo;Mezzanine&amp;rdquo;. Así pues, lo primer es crear y activar el entorno virtual en el que trabajaremos en desarrollo:</description>
    </item>
    
    <item>
      <title>Integridad, firmas y autenticación</title>
      <link>https://sysadblog.onrender.com/posts/practica_integridad_firmas_autentificacion/</link>
      <pubDate>Sat, 20 Nov 2021 15:35:40 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_integridad_firmas_autentificacion/</guid>
      <description>Integridad, firmas y autenticación    Tarea 1: Firmas electrónicas    En este primer apartado vamos a trabajar con las firmas electrónicas.
Manda un documento y la firma electrónica del mismo a un compañero. Verifica la firma que tu has recibido.    Para empezar, voy a mostrar las claves que tengo guardadas en mi &amp;ldquo;llavero&amp;rdquo; de claves de gpg:
gpg --list-keys gpg: comprobando base de datos de confianza gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: nivel: 0 validez: 1 firmada: 0 confianza: 0-, 0q, 0n, 0m, 0f, 1u gpg: siguiente comprobación de base de datos de confianza el: 2021-12-15 /home/dparrales/.</description>
    </item>
    
    <item>
      <title>Despliegue de aplicaciones python</title>
      <link>https://sysadblog.onrender.com/posts/practica_despliegue_aplicaciones_python/</link>
      <pubDate>Wed, 17 Nov 2021 19:48:03 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_despliegue_aplicaciones_python/</guid>
      <description>Despliegue de aplicaciones python    Tarea 1: Entorno de desarrollo    Vamos a desarrollar la aplicación del tutorial de django 3.2. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello:
 Realiza un fork del repositorio de GitHub: https://github.com/josedom24/django_tutorial. Crea un entorno virtual de python3 e instala las dependencias necesarias para que funcione el proyecto. Comprueba que vamos a trabajar con una base de datos sqlite.</description>
    </item>
    
    <item>
      <title>Delegación de subdominios con bind9</title>
      <link>https://sysadblog.onrender.com/posts/delegacion_subdominios/</link>
      <pubDate>Mon, 15 Nov 2021 17:36:46 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/delegacion_subdominios/</guid>
      <description>Delegación de subdominios con bind9    Tenemos un servidor DNS que gestiona la zona correspondiente al nombre de dominio iesgn.org, en esta ocasión queremos delegar el subdominio informatica.iesgn.org para que lo gestione otro servidor DNS. Por lo tanto tenemos un escenario con dos servidores DNS:
 tunombre.iesgn.org, es servidor DNS autorizado para la zona iesgn.org. tunombre-ns.informatica.iesgn.org, es el servidor DNS para la zona informatica.iesgn.org y, está instalado en otra máquina.</description>
    </item>
    
    <item>
      <title>Cifrado asimétrico con gpg y openssl</title>
      <link>https://sysadblog.onrender.com/posts/cifradoasimetrico_gpg_openssl/</link>
      <pubDate>Sat, 13 Nov 2021 19:50:18 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/cifradoasimetrico_gpg_openssl/</guid>
      <description>Cifrado asimétrico con gpg y openssl    Tarea 1: Generación de claves (gpg)    Los algoritmos de cifrado asimétrico utilizan dos claves para el cifrado y descifrado de mensajes. Cada persona involucrada (receptor y emisor) debe disponer, por tanto, de una pareja de claves pública y privada. Para generar nuestra pareja de claves con gpg utilizamos la opción --gen-key:
Para esta práctica no es necesario que indiquemos frase de paso en la generación de las claves (al menos para la clave pública).</description>
    </item>
    
    <item>
      <title>Instalación y configuración de un servidor DNS esclavo</title>
      <link>https://sysadblog.onrender.com/posts/dns_maestro_esclavo/</link>
      <pubDate>Wed, 10 Nov 2021 20:12:40 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/dns_maestro_esclavo/</guid>
      <description>Instalación y configuración de un servidor DNS esclavo    El servidor DNS actual funciona como DNS maestro. Vamos a instalar un nuevo servidor DNS que va a estar configurado como DNS esclavo del anterior, donde se van a ir copiando periódicamente las zonas del DNS maestro. Suponemos que el nombre del servidor DNS esclavo se va llamar tusapellidos.iesgn.org.
 Realiza la instalación del servidor DNS esclavo. Comprueba si las zonas definidas en el maestro tienen algún error con el comando adecuado.</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; uwsgi</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_uwsgi/</link>
      <pubDate>Tue, 09 Nov 2021 21:15:20 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_uwsgi/</guid>
      <description>Desplegando aplicaciones flask con apache2 + uwsgi    Vamos a explicar paso por paso como configurar apache y ngnix para que usen uwsgi para servir aplicaciones web python, en concreto, la aplicación guestbook.
En primer lugar tenemos que instalar los paquetes que usaremos para el ejercicio, incluyendo los paquetes necesarios para crear el entorno virtual y las dependencias de guesbook:
apt install python3-venv libapache2-mod-wsgi-py3 git redis build-essential libpython3.9-dev Ahora creamos el entorno virtual en el que instalaremos flask:</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; gunicorn</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_gunicorn/</link>
      <pubDate>Tue, 09 Nov 2021 20:14:24 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_gunicorn/</guid>
      <description>Desplegando aplicaciones flask con apache2 + gunicorn    Vamos a explicar paso por paso como configurar apache y ngnix para que usen gunicorn para servir aplicaciones web python, en concreto, la aplicación guestbook.
En primer lugar tenemos que instalar los paquetes que usaremos para el ejercicio, incluyendo los paquetes necesarios para crear el entorno virtual y las dependencias de guesbook:
apt install python3-venv libapache2-mod-wsgi-py3 git redis Ahora creamos el entorno virtual en el que instalaremos flask:</description>
    </item>
    
    <item>
      <title>Migración de aplicaciones web PHP en tu VPS</title>
      <link>https://sysadblog.onrender.com/posts/practicamigracion_php_vps/</link>
      <pubDate>Tue, 09 Nov 2021 17:53:28 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practicamigracion_php_vps/</guid>
      <description>Instalación/migración de aplicaciones web PHP en tu VPS    Esta práctica constará de dos tareas:
Tarea 1:
Realizar la migración de la primera aplicación que tienes instalada en la práctica anterior a nuestro entorno de producción, para ello ten en cuenta lo siguiente:
 La aplicación se tendrá que migrar a un nuevo virtualhost al que se accederá con el nombre portal.tudominio.algo. Vamos a nombrar el servicio de base de datos que tenemos en producción.</description>
    </item>
    
    <item>
      <title>Instalación y configuración del servidor bind9 en nuestra red local</title>
      <link>https://sysadblog.onrender.com/posts/bind9_redlocal/</link>
      <pubDate>Mon, 08 Nov 2021 20:31:22 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/bind9_redlocal/</guid>
      <description>Instalación y configuración del servidor bind9 en nuestra red local    Escenario     En nuestra red local tenemos un servidor Web que sirve dos páginas web: www.iesgn.org, departamentos.iesgn.org. Vamos a instalar en nuestra red local un servidor DNS (lo puedes instalar en el mismo equipo que tiene el servidor web) El nombre del servidor DNS va a ser tunombre.iesgn.org.  Servidor bind9    Instala un servidor dns bind9.</description>
    </item>
    
    <item>
      <title>Interconexión de un servidor Oracle 19c con PostgreSQL</title>
      <link>https://sysadblog.onrender.com/posts/interconexion_oracle_postgre/</link>
      <pubDate>Sun, 07 Nov 2021 12:50:20 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/interconexion_oracle_postgre/</guid>
      <description>Interconexión de Oracle19c con PostgreSQL    Tenemos las siguientes dos máquinas en el escenario:
 Oracle (Centos 8): con ip 192.168.122.12 Postgre (Debian 10): con ip 192.168.122.18  Partimos también de la base de que ambas máquinas están ya configuradas para el acceso remoto.
Desde Oracle19c a PostgreSQL    Oracle no cuenta con un soporte nativo para realizar interconexiones con otros gestores de bases de datos que no sean Oracle, por lo que vamos a utlizar ODBC (Open Database Connectivity), que nos permite el acceso a cualquier base de datos en cualquier aplicación.</description>
    </item>
    
    <item>
      <title>Migración de Centos 8 a Rocky Linux</title>
      <link>https://sysadblog.onrender.com/posts/migrarcentos_rocky/</link>
      <pubDate>Sat, 06 Nov 2021 20:39:03 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/migrarcentos_rocky/</guid>
      <description>Migración de Centos 8 a Rocky Linux    Debido a las últimas noticias sobre Centos 8, nos vemos obligados a tener que tomar un decisión con respecto al futuro de las máquinas que ahora mismo estén funcionando con Centos 8. Esta decisión será a que sistema operativo debemos migrar dichas máquinas. En este momento hay varias opciones de entre las que elegir: Rocky Linux, Alma Linux, Red Hat Enterprise Linux, Oracle Linux, etc.</description>
    </item>
    
    <item>
      <title>Instalación de un servidor LEMP en nuestra VPS</title>
      <link>https://sysadblog.onrender.com/posts/practica_nginx/</link>
      <pubDate>Thu, 04 Nov 2021 11:08:45 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_nginx/</guid>
      <description>Instalación de un servidor LEMP en nuestra VPS    Instalación    Vamos a tener los siguientes pasos:
 Instala un servidor web nginx Instala un servidor de base de datos MariaDB. Ejecuta el programa necesario para asegurar el servicio, ya que lo vamos a tener corriendo en el entorno de producción. Instala un servidor de aplicaciones PHP-FPM.   Vamos entonces a instalar nginx:
apt update &amp;amp;&amp;amp; apt install nginx Ahora instalamos mariadb y lo securizamos con su script:</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; mod_wsgi</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_wsgi/</link>
      <pubDate>Thu, 04 Nov 2021 10:29:00 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_wsgi/</guid>
      <description>Desplegando aplicaciones flask con apache2 + mod_wsgi    En este ejercicio tenemos que configurar la aplicación guestbook para que sea servida con apache2 y el módulo wsgi. Para ello vamos a tener que realizar los siguientes pasos:
Crear el entorno virtual con el que vamos a trabajar    Para ello tenemos que instalar el paquete necesario para crear entornos virtuales con python3:
apt install python3-venv
A continuación podemos crear el entorno con el siguiente comando:</description>
    </item>
    
    <item>
      <title>Apache2 como proxy inverso</title>
      <link>https://sysadblog.onrender.com/posts/apache2_proxyinverso/</link>
      <pubDate>Sat, 30 Oct 2021 16:05:17 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/apache2_proxyinverso/</guid>
      <description>Apache2 como proxy inverso    Descarga el siguiente fichero donde encontrarás un escenario vagrant y una receta ansible para configurar el siguiente escenario:
 Una máquina “proxy” conectada al exterior y a una red interna. Una máquina “servidorweb” conectada a la red interna.  En la máquina “servidorweb” tenemos instalado un apache2 con dos virtualhost. Suponemos que no podemos acceder a ella por la red de mantenimiento, por lo tanto lo que tienes que hacer es lo siguiente:</description>
    </item>
    
    <item>
      <title>Infraestructura de red router-nat desde OSC</title>
      <link>https://sysadblog.onrender.com/posts/routernat_osc/</link>
      <pubDate>Fri, 29 Oct 2021 20:05:56 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/routernat_osc/</guid>
      <description>Infraestructura de red router-nat desde OSC    Vamos a crear la siguiente infraestructura:
Con las siguientes características:
 Crea una red que se debe llamar “red_interna”, con direccionamiento 192.168.0.0/24, tendrá el DHCP activado, el gateway será el 192.168.0.1 y el DNS que reparte el 192.168.202.2. Crea una instancia a partir de una imagen, llamada router conecta a tu red y a la red “red_interna” en la dirección 192.168.0.1. Esta máquina será la puerta de enlace del la otra máquina.</description>
    </item>
    
    <item>
      <title>Infraestructura de red router-nat desde horizon</title>
      <link>https://sysadblog.onrender.com/posts/routernat-horizon/</link>
      <pubDate>Fri, 29 Oct 2021 09:49:22 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/routernat-horizon/</guid>
      <description>Infraestructura de red router-nat desde horizon    El escenario tendrá las siguientes características:
 Crea una red que se debe llamar “red_interna”, con direccionamiento 192.168.0.0/24, tendrá el DHCP activado, el gateway será el 192.168.0.1 y el DNS que reparte el 192.168.202.2. Crea una instancia a partir de una imagen, llamada router conecta a tu red y a la red “red_interna” en la dirección 192.168.0.1. Esta máquina será la puerta de enlace del la otra máquina.</description>
    </item>
    
    <item>
      <title>Ejecución de PHP con PHP-FPM</title>
      <link>https://sysadblog.onrender.com/posts/ejecucion_php_fpm/</link>
      <pubDate>Thu, 28 Oct 2021 20:11:20 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/ejecucion_php_fpm/</guid>
      <description>Ejecución de PHP con PHP-FPM    El ejercicio tendrá los siguientes pasos:
 Desinstala el módulo de apache2 que permite la ejecución de PHP. Instala PHP-FPM. Configura apache2 para que utilice PHP-FPM para ejecutar PHP, lo puedes hacer para todos los virtualhost o en cada uno de los virtualhost. Comprueba accediendo a un fichero info.php, que los script PHP se estan ejecutando con PHP-FPM. Comprueba que los CMS instalados siguen funcionando.</description>
    </item>
    
    <item>
      <title>Implantación de aplicaciones web PHP</title>
      <link>https://sysadblog.onrender.com/posts/practicacms/</link>
      <pubDate>Thu, 28 Oct 2021 11:07:36 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practicacms/</guid>
      <description>Práctica: Implantación de aplicaciones web PHP    Los requisitos previos son los siguientes:
 Crea una instancia de vagrant basado en un box debian o ubuntu Instala en esa máquina virtual toda la pila LAMP  Tarea 1: Instalación de un CMS PHP en mi servidor local    Los objetivos de esta tarea son los siguientes:
 Configura el servidor web con virtual hosting para que el CMS sea accesible desde la dirección: www.</description>
    </item>
    
    <item>
      <title>Modificación de un virtualhost con el fichero .htaccess</title>
      <link>https://sysadblog.onrender.com/posts/htaccess_apache2/</link>
      <pubDate>Tue, 26 Oct 2021 20:06:50 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/htaccess_apache2/</guid>
      <description>Configuración de apache mediante archivo .htaccess    Date de alta en un proveedor de hosting. ¿Si necesitamos configurar el servidor web que han configurado los administradores del proveedor?, ¿qué podemos hacer? ¿Para qué sirve la directiva AllowOverride de apache2?. Utilizando archivos .htaccess realiza las siguientes configuraciones:
 Habilita el listado de ficheros en la URL http://host.dominio/nas. Crea una redirección permanente: cuando entremos en http://host.dominio/google salte a www.google.es. Pedir autentificación para entrar en la URL http://host.</description>
    </item>
    
    <item>
      <title>Compilación de un Kernel a medida</title>
      <link>https://sysadblog.onrender.com/posts/kernelmedida/</link>
      <pubDate>Tue, 26 Oct 2021 13:17:15 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/kernelmedida/</guid>
      <description>Compilación de un kernel a medida    En esta práctica vamos a descargar un kernel y vamos a intentar retirarle el mayor número de módulos posibles para reducir al máximo su tamaño, siempre asegurándonos de que siga siendo funcional.
En primer lugar, para tener localizados todos los archivos que descarguemos y generemos, vamos a crear una nueva carpeta:
mkdir kernel &amp;amp;&amp;amp; cd kernel Ahora vamos a instalar los paquetes que vamos a usar para la compilación (el paquete qtbase5-dev lo usaremos más adelante para seleccionar que módulos quitar del kernel de forma más amena):</description>
    </item>
    
    <item>
      <title>Mapear URL a ubicaciones de un sistema de ficheros con Apache2</title>
      <link>https://sysadblog.onrender.com/posts/mapearurl/</link>
      <pubDate>Thu, 21 Oct 2021 18:27:53 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/mapearurl/</guid>
      <description>Mapear URL a ubicaciones de un sistema de ficheros    Base: Crea un nuevo host virtual que es accedido con el nombre www.mapeo.com, cuyo DocumentRoot sea /srv/mapeo.
En este ejercicio cumpliremos los siguientes objetivos:
 Cuando se entre a la dirección www.mapeo.com se redireccionará automáticamente a www.mapeo.com/principal, donde se mostrará el mensaje de bienvenida. En el directorio principal no se permite ver la lista de los ficheros, no se permite que se siga los enlaces simbólicos y no se permite negociación de contenido.</description>
    </item>
    
    <item>
      <title>Instalación de BookMedik y acceso usando LAMP</title>
      <link>https://sysadblog.onrender.com/posts/bookmedik/</link>
      <pubDate>Sat, 16 Oct 2021 20:11:36 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/bookmedik/</guid>
      <description>Instalación de la aplicación BookMedik    Vamos a instala la aplicación BookMedik, un sistema para llevar el control de citas medicas, pacientes, médicos, historiales e citas, áreas medicas y mucho mas, pensado para centros médicos, clínicas y médicos independientes. Puedes encontrar la aplicación en https://github.com/evilnapsis/bookmedik.
Para realizar la instalación sigue los siguientes pasos:
Crea la base de datos y las tablas necesarias recuperando la copia de seguridad e la base de datos que encuentras en el fichero schema.</description>
    </item>
    
    <item>
      <title>Instalación de phpmyadmin usando un virtualhost</title>
      <link>https://sysadblog.onrender.com/posts/phpmyadmin/</link>
      <pubDate>Sat, 16 Oct 2021 17:04:04 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/phpmyadmin/</guid>
      <description>Instalación de phpmyadmin    phpmyadmin es una aplicación web escrita en PHP que nos posibilita la gestión de una base de datos mysql/mariadb.
Normalmente vamos a instalar las aplicaciones web descargando directamente el código de la aplicación al servidor, pero en este ejercicio vamos a instalar la aplicación desde los repositorios de Debian (para este ejercicio previamente hemos instalado un servidor LAMP en nuestra máquina).
Realizaremos los siguientes pasos:</description>
    </item>
    
    <item>
      <title>Práctica de configuración de un servidor DHCP manualmente y con ansible</title>
      <link>https://sysadblog.onrender.com/posts/practicadhcp/</link>
      <pubDate>Thu, 14 Oct 2021 20:32:54 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practicadhcp/</guid>
      <description>Práctica DHCP    Escenario    Preparación del escenario Crea un escenario en libvirt/kvm (no uses Vagrant) de la siguiente manera: Máquina Servidor: Tiene tres tarjetas de red: una que le da acceso a internet (NAT o pública) y dos redes privadas (muy aisladas). Máquina nodo_lan1: Un cliente linux conectado a la primera red privada. Máquina nodo_lan2: Un cliente linux conectado a la segunda red privada. Servidor dhcp Instala un servidor dhcp en el ordenador “servidor” que de servicio a los ordenadores de red local, teniendo en cuenta: Por la red privada 1: Reparte configuración en la red 192.</description>
    </item>
    
    <item>
      <title>Tomar el control de Metasploitable3</title>
      <link>https://sysadblog.onrender.com/posts/metasploitable3/</link>
      <pubDate>Mon, 11 Oct 2021 19:32:07 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/metasploitable3/</guid>
      <description>Tomar el control de la máquina Ubuntu de Metasploitable3 a través de un ataque de fuerza bruta por SSH    En esta parte vamos a utilizar una máquina con sistema operativo Kali Linux para tomar el control de una máquina Ubuntu creada a través de “Metasploitable3”, por lo que ha sido creada con multitud de vulnerabilidades que podremos aprovechar. En este caso en concreto, he optado por usar un ataque de fuerza bruta para conectarme por ssh a la máquina y una vez dentro escalar privilegios para convertirme en root, obteniendo así el control total de la máquina.</description>
    </item>
    
    <item>
      <title>Ejercicios para trabajar con el almacenamiento en libvirt</title>
      <link>https://sysadblog.onrender.com/posts/almacemientolibvirt/</link>
      <pubDate>Mon, 11 Oct 2021 16:26:50 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/almacemientolibvirt/</guid>
      <description>Ejercicios para trabajar con el almacenamiento en libvirt    Crea un nuevo pool de almacenamiento de tipo lvm, y crea un volumen de 3Gi dentro que sea una volumen lógico. Con virt-install instala una máquina que se llame original_tunombre cuyo disco sea el volumen creado.    Lo primero es crear un fichero .xml que defina el pool de almacenamiento que vamos a crear:
&amp;lt;pool type=&amp;#39;logical&amp;#39;&amp;gt; &amp;lt;name&amp;gt;lvm-pool&amp;lt;/name&amp;gt; &amp;lt;capacity unit=&amp;#39;bytes&amp;#39;&amp;gt;5368709120&amp;lt;/capacity&amp;gt; &amp;lt;source&amp;gt; &amp;lt;name&amp;gt;vg1&amp;lt;/name&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;target&amp;gt; &amp;lt;path&amp;gt;/home/dparrales/Descargas/pool-lvm&amp;lt;/path&amp;gt; &amp;lt;permissions&amp;gt; &amp;lt;mode&amp;gt;0711&amp;lt;/mode&amp;gt; &amp;lt;owner&amp;gt;0&amp;lt;/owner&amp;gt; &amp;lt;group&amp;gt;0&amp;lt;/group&amp;gt; &amp;lt;/permissions&amp;gt; &amp;lt;/target&amp;gt; &amp;lt;/pool&amp;gt; Después definimos el pool de almacenamiento y lo iniciamos:</description>
    </item>
    
    <item>
      <title>Instalación de un servidor DHCP en Debian</title>
      <link>https://sysadblog.onrender.com/posts/dhcp/</link>
      <pubDate>Fri, 08 Oct 2021 19:53:50 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/dhcp/</guid>
      <description>Ejercicio 1: Instalación y configuración del servidor dhcp en linux    Instalación y configuración en el servidor    Para este ejercicio vamos a instalar y configurar de forma básica un servidor dhcp en linux. El servidor deberá tener la siguiente configuración:
 Rango de direcciones a repartir: 192.168.0.100 - 192.168.0.110 Máscara de red: 255.255.255.0 Duración de la concesión: 1 hora Puerta de enlace: 192.168.0.1 Servidores DNS: 8.</description>
    </item>
    
    <item>
      <title>Compilación de un paquete escrito en C</title>
      <link>https://sysadblog.onrender.com/posts/compilacion/</link>
      <pubDate>Thu, 07 Oct 2021 18:03:08 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/compilacion/</guid>
      <description>Compilación de un programa en C utilizando un Makefile    Empezamos eligigiendo un paquete basado en C de la librería de paquetes de Debian. En mi caso, he elegido lvm2. Para descargar sus fuentes usamos lo siguiente (previamente hemos creado un directorio en /opt al que hemos llamado lvm):
mkdir /opt/lvm &amp;amp;&amp;amp; cd /opt/lvm apt source lvm2 Para compilar el paquete hemos de instalar primero las dependencias. Para ello podemos instalar todos los paquetes que aparecen en la línea build-depends del fichero .</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://sysadblog.onrender.com/posts/hugo/</link>
      <pubDate>Thu, 07 Oct 2021 09:16:53 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/hugo/</guid>
      <description>Generador de páginas estáticas: Hugo    Sobre Hugo    Hugo es un generador de páginas estáticas rápido y moderno escrito en Go. Utiliza las librerías de Go html/template y text/template como base para las plantillas que utiliza. Permite escribir en Markdown, el cual lee al realizar un despliegue, transformándolo en html, lo que nos permite generar páginas estáticas de forma muy sencilla. Instalarlo en Debian es de lo más sencillo, solo hay que usar el siguiente comando:</description>
    </item>
    
  </channel>
</rss>
