<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aplicaciones Web on Sysadblog</title>
    <link>https://sysadblog.onrender.com/categories/aplicaciones-web/</link>
    <description>Recent content in Aplicaciones Web on Sysadblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Feb 2022 21:28:35 +0100</lastBuildDate><atom:link href="https://sysadblog.onrender.com/categories/aplicaciones-web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implantación de aplicaciones web PHP en Docker</title>
      <link>https://sysadblog.onrender.com/posts/practica_php_docker/</link>
      <pubDate>Wed, 02 Feb 2022 21:28:35 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_php_docker/</guid>
      <description>Práctica: Implantación de aplicaciones web PHP en Docker    Imaginemos que el equipo de desarrollo de nuestra empresa ha desarrollado una aplicación PHP que se llama BookMedik.
Queremos crear una imagen Docker para implantar dicha aplicación.
Tenemos que tener en cuenta los siguientes aspectos:
  Contenedor mariadb
 Es necesario que nuestra aplicación guarde su información en un contenedor docker mariadb. El script para generar la base de datos y los registros lo encuentras en el repositorio y se llama schema.</description>
    </item>
    
    <item>
      <title>Ejercicios con docker</title>
      <link>https://sysadblog.onrender.com/posts/ejercicios_docker/</link>
      <pubDate>Thu, 20 Jan 2022 09:04:35 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/ejercicios_docker/</guid>
      <description>Ejercicios con docker    Vamos a realizar los ejercicios que aparecen en el siguiente curso de docker.
Ejercicio 1: Introducción    Vamos a entregar el ejercicio 4 con algunas modificaciones. Crearemos un contenedor demonio a partir de la imagen nginx, el contenedor se debe llamar servidor_web y se debe acceder a él utilizando el puerto 8181 del ordenador donde tengas instalado docker.
Entrega lo siguiente:
 Pantallazo donde se vea la creación del contenedor y podamos comprobar que el contenedor está funcionando.</description>
    </item>
    
    <item>
      <title>Despliegue de CMS Java (Guacamole)</title>
      <link>https://sysadblog.onrender.com/posts/practica_desplieguecms_java_guacamole/</link>
      <pubDate>Sat, 11 Dec 2021 16:40:54 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_desplieguecms_java_guacamole/</guid>
      <description>Despliegue de CMS Java    En esta práctica vamos a desplegar un CMS escrito en java. ¿Qué debemos tener en cuenta?
 Debes desplegar la aplicación desde un fichero war. No usar instalaciones “bundler”. Estas instalaciones instalan la aplicación y tomcat al mismo tiempo. La aplicación se debe desplegar en el tomcat que tienes instalado. Utiliza una máquina virtual que tenga suficiente memoria, al menos 2Gb, algunos CMS requieren mucha memoria RAM.</description>
    </item>
    
    <item>
      <title>Instalación de un CMS python (Mezzanine)</title>
      <link>https://sysadblog.onrender.com/posts/practica_instalacion_cms_python/</link>
      <pubDate>Fri, 26 Nov 2021 19:12:33 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_instalacion_cms_python/</guid>
      <description>Instalación de un CMS python    En esta tarea vamos a desplegar un CMS python. Tienes que realizar la instalación de un CMS python basado en django (puedes encontrar varios en el siguiente enlace.
Instala el CMS en el entorno de desarrollo. Debes utilizar un entorno virtual.    En mi caso, he elegido instalar &amp;ldquo;Mezzanine&amp;rdquo;. Así pues, lo primer es crear y activar el entorno virtual en el que trabajaremos en desarrollo:</description>
    </item>
    
    <item>
      <title>Despliegue de aplicaciones python</title>
      <link>https://sysadblog.onrender.com/posts/practica_despliegue_aplicaciones_python/</link>
      <pubDate>Wed, 17 Nov 2021 19:48:03 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practica_despliegue_aplicaciones_python/</guid>
      <description>Despliegue de aplicaciones python    Tarea 1: Entorno de desarrollo    Vamos a desarrollar la aplicación del tutorial de django 3.2. Vamos a configurar tu equipo como entorno de desarrollo para trabajar con la aplicación, para ello:
 Realiza un fork del repositorio de GitHub: https://github.com/josedom24/django_tutorial. Crea un entorno virtual de python3 e instala las dependencias necesarias para que funcione el proyecto. Comprueba que vamos a trabajar con una base de datos sqlite.</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; uwsgi</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_uwsgi/</link>
      <pubDate>Tue, 09 Nov 2021 21:15:20 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_uwsgi/</guid>
      <description>Desplegando aplicaciones flask con apache2 + uwsgi    Vamos a explicar paso por paso como configurar apache y ngnix para que usen uwsgi para servir aplicaciones web python, en concreto, la aplicación guestbook.
En primer lugar tenemos que instalar los paquetes que usaremos para el ejercicio, incluyendo los paquetes necesarios para crear el entorno virtual y las dependencias de guesbook:
apt install python3-venv libapache2-mod-wsgi-py3 git redis build-essential libpython3.9-dev Ahora creamos el entorno virtual en el que instalaremos flask:</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; gunicorn</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_gunicorn/</link>
      <pubDate>Tue, 09 Nov 2021 20:14:24 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_gunicorn/</guid>
      <description>Desplegando aplicaciones flask con apache2 + gunicorn    Vamos a explicar paso por paso como configurar apache y ngnix para que usen gunicorn para servir aplicaciones web python, en concreto, la aplicación guestbook.
En primer lugar tenemos que instalar los paquetes que usaremos para el ejercicio, incluyendo los paquetes necesarios para crear el entorno virtual y las dependencias de guesbook:
apt install python3-venv libapache2-mod-wsgi-py3 git redis Ahora creamos el entorno virtual en el que instalaremos flask:</description>
    </item>
    
    <item>
      <title>Migración de aplicaciones web PHP en tu VPS</title>
      <link>https://sysadblog.onrender.com/posts/practicamigracion_php_vps/</link>
      <pubDate>Tue, 09 Nov 2021 17:53:28 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practicamigracion_php_vps/</guid>
      <description>Instalación/migración de aplicaciones web PHP en tu VPS    Esta práctica constará de dos tareas:
Tarea 1:
Realizar la migración de la primera aplicación que tienes instalada en la práctica anterior a nuestro entorno de producción, para ello ten en cuenta lo siguiente:
 La aplicación se tendrá que migrar a un nuevo virtualhost al que se accederá con el nombre portal.tudominio.algo. Vamos a nombrar el servicio de base de datos que tenemos en producción.</description>
    </item>
    
    <item>
      <title>Desplegando aplicaciones flask con apache2 &#43; mod_wsgi</title>
      <link>https://sysadblog.onrender.com/posts/flask_apache2_wsgi/</link>
      <pubDate>Thu, 04 Nov 2021 10:29:00 +0100</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/flask_apache2_wsgi/</guid>
      <description>Desplegando aplicaciones flask con apache2 + mod_wsgi    En este ejercicio tenemos que configurar la aplicación guestbook para que sea servida con apache2 y el módulo wsgi. Para ello vamos a tener que realizar los siguientes pasos:
Crear el entorno virtual con el que vamos a trabajar    Para ello tenemos que instalar el paquete necesario para crear entornos virtuales con python3:
apt install python3-venv
A continuación podemos crear el entorno con el siguiente comando:</description>
    </item>
    
    <item>
      <title>Ejecución de PHP con PHP-FPM</title>
      <link>https://sysadblog.onrender.com/posts/ejecucion_php_fpm/</link>
      <pubDate>Thu, 28 Oct 2021 20:11:20 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/ejecucion_php_fpm/</guid>
      <description>Ejecución de PHP con PHP-FPM    El ejercicio tendrá los siguientes pasos:
 Desinstala el módulo de apache2 que permite la ejecución de PHP. Instala PHP-FPM. Configura apache2 para que utilice PHP-FPM para ejecutar PHP, lo puedes hacer para todos los virtualhost o en cada uno de los virtualhost. Comprueba accediendo a un fichero info.php, que los script PHP se estan ejecutando con PHP-FPM. Comprueba que los CMS instalados siguen funcionando.</description>
    </item>
    
    <item>
      <title>Implantación de aplicaciones web PHP</title>
      <link>https://sysadblog.onrender.com/posts/practicacms/</link>
      <pubDate>Thu, 28 Oct 2021 11:07:36 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/practicacms/</guid>
      <description>Práctica: Implantación de aplicaciones web PHP    Los requisitos previos son los siguientes:
 Crea una instancia de vagrant basado en un box debian o ubuntu Instala en esa máquina virtual toda la pila LAMP  Tarea 1: Instalación de un CMS PHP en mi servidor local    Los objetivos de esta tarea son los siguientes:
 Configura el servidor web con virtual hosting para que el CMS sea accesible desde la dirección: www.</description>
    </item>
    
    <item>
      <title>Instalación de BookMedik y acceso usando LAMP</title>
      <link>https://sysadblog.onrender.com/posts/bookmedik/</link>
      <pubDate>Sat, 16 Oct 2021 20:11:36 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/bookmedik/</guid>
      <description>Instalación de la aplicación BookMedik    Vamos a instala la aplicación BookMedik, un sistema para llevar el control de citas medicas, pacientes, médicos, historiales e citas, áreas medicas y mucho mas, pensado para centros médicos, clínicas y médicos independientes. Puedes encontrar la aplicación en https://github.com/evilnapsis/bookmedik.
Para realizar la instalación sigue los siguientes pasos:
Crea la base de datos y las tablas necesarias recuperando la copia de seguridad e la base de datos que encuentras en el fichero schema.</description>
    </item>
    
    <item>
      <title>Instalación de phpmyadmin usando un virtualhost</title>
      <link>https://sysadblog.onrender.com/posts/phpmyadmin/</link>
      <pubDate>Sat, 16 Oct 2021 17:04:04 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/phpmyadmin/</guid>
      <description>Instalación de phpmyadmin    phpmyadmin es una aplicación web escrita en PHP que nos posibilita la gestión de una base de datos mysql/mariadb.
Normalmente vamos a instalar las aplicaciones web descargando directamente el código de la aplicación al servidor, pero en este ejercicio vamos a instalar la aplicación desde los repositorios de Debian (para este ejercicio previamente hemos instalado un servidor LAMP en nuestra máquina).
Realizaremos los siguientes pasos:</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://sysadblog.onrender.com/posts/hugo/</link>
      <pubDate>Thu, 07 Oct 2021 09:16:53 +0200</pubDate>
      
      <guid>https://sysadblog.onrender.com/posts/hugo/</guid>
      <description>Generador de páginas estáticas: Hugo    Sobre Hugo    Hugo es un generador de páginas estáticas rápido y moderno escrito en Go. Utiliza las librerías de Go html/template y text/template como base para las plantillas que utiliza. Permite escribir en Markdown, el cual lee al realizar un despliegue, transformándolo en html, lo que nos permite generar páginas estáticas de forma muy sencilla. Instalarlo en Debian es de lo más sencillo, solo hay que usar el siguiente comando:</description>
    </item>
    
  </channel>
</rss>
